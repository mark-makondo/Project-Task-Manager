// input autocomplete transparent mixin
// must be inluded inside of input element
@mixin removeAutoCompleteBG($fontColor) {
	&:-webkit-autofill,
	&:-webkit-autofill:hover,
	&:-webkit-autofill:focus,
	&:-webkit-autofill:active {
		// the time it takes to remove the bg color
		transition: background-color 5000s ease-in-out 0s;
		// change the text color
		-webkit-text-fill-color: $fontColor !important;
	}
}

// ignore touch screen devices for hover
// must be inluded inside of an element to be hovered
@mixin responsiveHover() {
	@media (hover: hover) {
		&:hover {
			@content;
		}
	}
}

// custom button for consistency
// must be included insife of a button element
@mixin customButtonWithHover($color, $bg) {
	padding: 0.35rem 0.8rem;
	border-radius: 0.4rem;
	border: none;
	color: $color;
	font-weight: 600;
	letter-spacing: 1px;
	outline: none;
	transition: 150ms linear;
	z-index: 1;
	cursor: pointer;
	text-align: center;
	background: $bg;
	text-transform: uppercase;

	@include responsiveHover {
		@content;
	}
}

// custom hovered elements for consistency
// must be include inside of an element to be hovered
@mixin customHover {
	transition: 150ms linear;
	padding: 0.5rem;
	cursor: pointer;
	border-radius: 0.3rem;
	@include responsiveHover() {
		background-color: getColors(fade-selected);
	}
}

// font size
@function getFontSize($type, $target) {
	@if $type == s {
		@return map-get($font-size-s, $target);
	} @else {
		@error "Invalid type #{type}.";
	}
}
@mixin setFontSize($type) {
	.normal-1 {
		font-size: getFontSize($type, normal-1);
	}
	.normal-2 {
		font-size: getFontSize($type, normal-2);
	}
	.normal-3 {
		font-size: getFontSize($type, normal-3);
	}
}

// max width
@function getMaxWidth($target) {
	@return map-get($max-width, $target);
}

// responsive mixin
@mixin media-md {
	@media screen and (min-width: 48em) {
		// 768px
		@content;
	}
}
@mixin media-lg {
	@media screen and (min-width: 75em) {
		// 1200px
		@content;
	}
}
@mixin media-xl {
	@media screen and (min-width: 118.75em) {
		// 1900px
		@content;
	}
}

// display flex
@mixin setFlex($direction, $align1, $align2) {
	display: flex;
	flex-direction: $direction;
	justify-content: $align1;
	align-items: $align2;
	align-content: $align2;
}

// get colors
@function getColors($target) {
	@return map-get($colors, $target);
} ;
